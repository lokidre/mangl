import electron from 'electron';

import {app, BrowserWindow, ipcMain} from 'electron';
import {theme_} from './frontend/theme';

import {initWorker} from './ipc/worker';

import * as Setup from './setup/setup';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

function parseBool(value: string | undefined, defaultValue = false) {
    if (value === undefined) return defaultValue;

    return (['true', 'false', true, false].includes(value) && JSON.parse(value)) || defaultValue;
}

export let mainWindow_: Electron.BrowserWindow | null = null;
let splashWindow_: Electron.BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

function createWindow() {

    //let devTools = process.env.NODE_ENV !== 'production';
    let devTools = !app.isPackaged;
    //devTools = true;
    // devTools = false;

    process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';


    const {width, height} = electron.screen.getPrimaryDisplay().workAreaSize;

    mainWindow_ = new BrowserWindow({
        width: width,
        height: height,
        title: Setup.appTitle,
        backgroundColor: theme_.backgroundColor,
        show: false,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            contextIsolation: false,
            sandbox: false,
            devTools: devTools,
        },
    });

    mainWindow_.on('closed', () => {
        mainWindow_ = null;
        app.exit(0);
    });

    mainWindow_.once('ready-to-show', () => {
        splashWindow_.destroy();
        splashWindow_ = null;

        //mainWindow_.maximize();
        mainWindow_.show();
    });

    splashWindow_ = new BrowserWindow({
        width: 500,
        height: 300,
        //transparent: true,
        frame: false,
        alwaysOnTop: true,
        backgroundColor: theme_.backgroundColor,
    });
    let splashHtml = `${__dirname}/static/splash.html`;
    //console.log(splashHtml)
    //splashWindow_.loadFile(splashHtml)
    //splashWindow_.loadURL('/renderer/splash.html')
    //splashWindow_.loadFile('renderer/splash.html')
    splashWindow_.center();

    //console.debug(MAIN_WINDOW_WEBPACK_ENTRY);

    mainWindow_.menuBarVisible = false;

    mainWindow_.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    //if (parseBool(process.env.REACT_APP_DEV_TOOLS)) {
    if (devTools) {
        mainWindow_.webContents.openDevTools();
    }

    //mainWindow_.maximize()
    //mainWindow_.menuBarVisible

    initWorker(mainWindow_);

    //splash.close();
    //mainWindow_.show();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed.
app.on('window-all-closed', () => {
    // On OS X it is common for applications and their menu bar
    // to stay active until the user quits explicitly with Cmd + Q
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it"s common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (mainWindow_ === null) {
        createWindow();
    }
});

// ipcMain.on(ID.RespondFileDataId, async (event, args) => {
//     console.log('main.ts, ipcMain.on ')
//     return args
// })
