import {app, BrowserWindow, ipcMain} from 'electron';
import { initWorker } from './worker';
// import  fs from 'fs'
// import  yaml from 'js-yaml'

// const fs = require('fs')
// const yaml = require('js-yaml');
export let fileData: any = {};

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

// async function handleFileOpen () {
//   //file reader
//   const fileData = fs.readFileSync('/home/maro/dev/mangl/tools/mangl-tex-gui/src' +'/files/imagesRender.yaml', 'utf8');
//   const yamlData = yaml.load(fileData);

//   let newDataForTable = yamlData.map((el:any)=>{
//     el.size.w !== undefined && (el.w = el.size.w)
//     el.size.h !== undefined && (el.h = el.size.h)
//     return el
//   })
// }

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 800,
        width: 1200,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            // preload:'./preload.ts',
            nodeIntegration: true,
        },
    });

    //mainWindow.menuBarVisible = false;

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();


    initWorker(mainWindow);

};

app.on('ready', () => {
    createWindow();
});

// ipcMain.handle('some-name', async (event, someArgument) => {
//     const result = 'nana';
//     return result;
// });

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
